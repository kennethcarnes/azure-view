name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      REPOSITORY_TOKEN:
        required: true
      AZURE_SWA_API_TOKEN:
        required: true

jobs:
  validate-job:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep 
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          additionalArguments: --what-if

  deploy-backend-job:
    needs: validate-job
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      functionAppName: ${{ steps.deploy-backend-step.outputs.functionAppName }}
      keyVaultName: ${{ steps.deploy-backend-step.outputs.keyVaultName }}
      appConfigName: ${{ steps.deploy-backend-step.outputs.appConfigName }}
      cosmosDbAccountName: ${{ steps.deploy-backend-step.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy-backend-step.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy-backend-step.outputs.cosmosDbContainerName }}
      cosmosDbContainerPartitionKey: ${{ steps.deploy-backend-step.outputs.cosmosDbContainerPartitionKey }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
  
      - name: Deploy Backend
        id: deploy-backend-step
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentMode: ${{ (inputs.environmentType == 'Test') && 'Complete' || 'Incremental' }} 
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
    
  release-job:
    needs: deploy-backend-job
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Release function code
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy-backend-job.outputs.functionAppName }}
          package: ./functions/

  deploy-frontend-job:
    needs: [deploy-backend-job, release-job]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy-frontend-step.outputs.swaName }}
      swaUrl: ${{ steps.deploy-frontend-step.outputs.swaUrl }}
      apimName: ${{ steps.deploy-frontend-step.outputs.apimName }}
      apimUrl: ${{ steps.deploy-frontend-step.outputs.apimUrl }}
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
          fetch-depth: 0
        
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
      - name: Deploy Frontend
        id: deploy-frontend-step
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentMode: ${{ (inputs.environmentType == 'Test') && 'Complete' || 'Incremental' }} 
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}

      - name: Get API Management Name
        id: get-apim-name
        run: |
          apimName=$(az deployment group show --name ${{ github.run_number }} --resource-group ${{ inputs.resourceGroupName }} --query 'properties.outputs.apimName.value' --output tsv)
          echo "API Management Name: $apimName"
          echo "apimName=$apimName" >> $GITHUB_ENV
          echo "::set-output name=apimName::$apimName"  # Add this line to set the output
      
      - name: Replace Placeholders in HTML
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            $ErrorActionPreference = "Stop"
            $htmlFilePath = "./app/index.html"
            $apimName = "${{ steps.get-apim-name.outputs.apimName }}" # Reference the correct step ID here
            
            Write-Output "API Management Instance Name: $apimName"
            ./scripts/Set-RepoPlaceholders.ps1 -HtmlFile $htmlFilePath -ApimName $apimName
    
              # Verification
              $content = Get-Content $htmlFilePath -Raw
              Write-Output "Updated HTML Content: $content"
          
              # Check for changes
              git config --global user.email "actions@github.com"
              git config --global user.name "GitHub Actions"
              git add $htmlFilePath
                
              if (git diff-index --quiet HEAD --) {
                Write-Output "No changes to commit."
              } else {
                git commit -m "Automatically replaced API URL placeholders in HTML [skip ci]"
                git remote set-url origin https://x-access-token:${{ secrets.REPOSITORY_TOKEN }}@github.com/kennethcarnes/azure-view.git
                git push origin ${{ github.ref }}
              }
      
      - name: Deploy to Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_SWA_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "app"          
                    
  config-job:
    needs: [deploy-frontend-job, deploy-backend-job]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      - name: Set script execution permissions
        run: |
          chmod +x ./scripts/*.ps1

      - name: Set Service Principle Cosmos DB Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-SPCosmosDBRoleDelegate.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -CosmosDbAccountName "${{ needs.deploy-backend-job.outputs.cosmosDbAccountName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"
    
      - name: Set Service Principle App Config Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-SPAppConfigRoleDelegate.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -AppConfigName "${{ needs.deploy-backend-job.outputs.appConfigName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"
      
      - name: Set Service Principle Function App Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-SPAppRoleDelegate.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -FunctionAppName "${{ needs.deploy-backend-job.outputs.functionAppName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"
      
      - name: Set Function App Cosmos DB Permissions
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-FuncAppCosmosDBPerms.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -FunctionAppName "${{ needs.deploy-backend-job.outputs.functionAppName }}" `
              -CosmosDbAccountName "${{ needs.deploy-backend-job.outputs.cosmosDbAccountName }}"
      
      - name: Ensure Az.AppConfiguration Module is Installed
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            $installedModule = Get-Module -ListAvailable -Name Az.AppConfiguration | Where-Object { $_.Version -eq '1.3.0' }
            if (-not $installedModule) {
              Install-Module -Name Az.AppConfiguration -RequiredVersion 1.3.0 -Force -Scope CurrentUser -SkipPublisherCheck
            }
          
      - name: Set App Config Key-Value Pairs
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-AppConfigKVPs.ps1 `
              -AppConfigName "${{ needs.deploy-backend-job.outputs.appConfigName }}" `
              -KeyVaultName "${{ needs.deploy-backend-job.outputs.keyVaultName }}" `
              -CosmosDbAccountName "${{ needs.deploy-backend-job.outputs.cosmosDbAccountName }}" `
              -CosmosDbDatabaseName "${{ needs.deploy-backend-job.outputs.cosmosDbDatabaseName }}" `
              -CosmosDbContainerName "${{ needs.deploy-backend-job.outputs.cosmosDbContainerName }}" `
              -CosmosDbContainerPartitionKey "${{ needs.deploy-backend-job.outputs.cosmosDbContainerPartitionKey }}"
          