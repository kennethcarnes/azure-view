name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Check if Secrets exist
        run: echo "First 5 characters of AZURE_CLIENT_ID is ${AZURE_CLIENT_ID:0:5}"
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      - name: List current directory and check if Bicep file exists
        run: |
          ls -la ./infra/
      - name: Print environment type
        run: echo "Environment type is ${{ inputs.environmentType }}"
      - name: Enable Azure CLI Debug Logging
        run: az configure --defaults only_show_errors=true
      - name: List Resource Groups
        run: az group list --output table
      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            githubToken=${{ secrets.GITHUB_TOKEN }}
          deploymentMode: Validate
      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            githubToken=${{ secrets.GITHUB_TOKEN }}

      # Debugging steps
      - name: Debug - Check Azure Environment Variables
        run: |
          echo "AZURE_CLIENT_ID: $AZURE_CLIENT_ID"
          echo "AZURE_TENANT_ID: $AZURE_TENANT_ID"
          echo "AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID"
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debug - Check GitHub Token
        run: |
          echo "GITHUB_TOKEN: $GITHUB_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug - Check Bicep Template Files
        run: |
          cat ./infra/main.bicep
          cat ./infra/frontend.bicep
          cat ./infra/backend.bicep

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run smoke tests
        shell: pwsh
        run: |
          Write-Host '${{needs.deploy.outputs.swaName}}'
          # $container = New-PesterContainer `
          #   -Path 'deploy/Website.Tests.ps1' `
          #   -Data @{ HostName = '${{needs.deploy.outputs.swaName}}' }
          # Invoke-Pester `
          #   -Container $container `
          #   -CI
