name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
      swaUrl: ${{ steps.deploy.outputs.swaUrl }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}
      appConfigName: ${{ steps.deploy.outputs.appConfigName }}
      cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}
      cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
  
      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentMode: ${{ (inputs.environmentType == 'Test') && 'Complete' || 'Incremental' }} 
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
  
      - name: Echo Outputs
        run: |
          echo "swaName: ${{ steps.deploy.outputs.swaName }}"
          echo "swaUrl: ${{ steps.deploy.outputs.swaUrl }}"
          echo "functionAppName: ${{ steps.deploy.outputs.functionAppName }}"
          echo "keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}"
          echo "appConfigName: ${{ steps.deploy.outputs.appConfigName }}"
          echo "cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}"
          echo "cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
          echo "cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}"
          echo "cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
  
      - name: Set Azure App Configuration
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            Install-Module -Name Az.AppConfiguration -Force -Scope CurrentUser -SkipPublisherCheck
            $appConfigName = "${{ steps.deploy.outputs.appConfigName }}"
            $endpoint = "https://$($appConfigName).azconfig.io"
            $keyValuePairs = @{
              "swaName" = "${{ steps.deploy.outputs.swaName }}"
              "keyVaultName" = "${{ steps.deploy.outputs.keyVaultName }}"
              "cosmosDbAccountName" = "${{ steps.deploy.outputs.cosmosDbAccountName }}"
              "cosmosDbDatabaseName" = "${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
              "cosmosDbContainerName" = "${{ steps.deploy.outputs.cosmosDbContainerName }}"
              "cosmosDbContainerPartitionKey" = "${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
            }
            
            foreach ($key in $keyValuePairs.Keys) {
              $value = $keyValuePairs[$key]
              $label = $key  # You can choose either $key or $value depending on your needs
              Set-AzAppConfigurationKeyValue -Endpoint $endpoint -Key $key -Label $label -Value $value
            }          
          
  release:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Deploy all functions to single function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy.outputs.functionAppName }}
          package: ./functions/
          
  post-deployment-tasks:
    needs: [ deploy, release ]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: List scripts directory
      run: ls -la ./scripts

    - name: Set execute permission for PowerShell scripts
      run: chmod +x ./scripts/*.ps1

    - name: Update CORS in function app
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: ./scripts/update-cors.ps1
          -ResourceGroupName "${{ inputs.resourceGroupName }}"
          -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}"
          -AllowedOrigins "${{ needs.deploy.outputs.swaUrl }}"

    - name: Replace placeholders in HTML
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: ./scripts/replace-placeholders.ps1
          -HtmlFile "./index.html"
          -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}"

    - name: Set permissions
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: ./scripts/set-permissions.ps1
          -ResourceGroupName "${{ inputs.resourceGroupName }}"
          -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}"
          -CosmosDbAccountName "${{ needs.deploy.outputs.cosmosDbAccountName }}"

    - name: Commit and push if changed
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add -A
        git diff-index --quiet HEAD || git commit -m "Automatically replaced function API URL placeholders in HTML [skip ci]"
        git push origin main
    
    - name: Update Azure Static Web App with latest code
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: |
          Update-AzStaticWebApp `
          -ResourceGroupName ${{ inputs.resourceGroupName }} `
          -Name ${{ needs.deploy.outputs.swaName }} `
          -AppLocation "./path-to-your-build-dir/"