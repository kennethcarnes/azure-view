name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      REPOSITORY_TOKEN:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep 
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
      swaUrl: ${{ steps.deploy.outputs.swaUrl }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}
      appConfigName: ${{ steps.deploy.outputs.appConfigName }}
      cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}
      cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
  
      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentMode: ${{ (inputs.environmentType == 'Test') && 'Complete' || 'Incremental' }} 
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
  
      - name: Echo Outputs
        run: |
          echo "swaName: ${{ steps.deploy.outputs.swaName }}"
          echo "swaUrl: ${{ steps.deploy.outputs.swaUrl }}"
          echo "functionAppName: ${{ steps.deploy.outputs.functionAppName }}"
          echo "keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}"
          echo "appConfigName: ${{ steps.deploy.outputs.appConfigName }}"
          echo "cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}"
          echo "cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
          echo "cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}"
          echo "cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
          
  release:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Release function code
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy.outputs.functionAppName }}
          package: ./functions/

  config:
    needs: [deploy, release]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      - name: Set script execution permissions
        run: |
          chmod +x ./scripts/*.ps1

      - name: Set Service Principle Cosmos DB Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-ServicePrincipleCosmosDBRoleDelegation.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -CosmosDbAccountName "${{ needs.deploy.outputs.cosmosDbAccountName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"

      - name: Set Service Principle App Config Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-ServicePrincipleAppConfigRoleDelegation.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -AppConfigName "${{ needs.deploy.outputs.appConfigName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"

      - name: Set Service Principle Function App Role Delegation
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-ServicePrincipleFunctionAppRoleDelegation.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}" `
              -ServicePrincipalClientId "${{ secrets.AZURE_CLIENT_ID }}"

      - name: Set Function App Cosmos DB Permissions
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-FunctionAppCosmosDBPermission.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}" `
              -CosmosDbAccountName "${{ needs.deploy.outputs.cosmosDbAccountName }}"

      - name: Ensure Az.AppConfiguration Module is Installed
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            $installedModule = Get-Module -ListAvailable -Name Az.AppConfiguration | Where-Object { $_.Version -eq '1.3.0' }
            if (-not $installedModule) {
              Install-Module -Name Az.AppConfiguration -RequiredVersion 1.3.0 -Force -Scope CurrentUser -SkipPublisherCheck
            }
      
      - name: Set App Config Key-Value Pairs
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-AppConfigKeyValuePairs.ps1 `
              -AppConfigName "${{ needs.deploy.outputs.appConfigName }}" `
              -SwaName "${{ needs.deploy.outputs.swaName }}" `
              -KeyVaultName "${{ needs.deploy.outputs.keyVaultName }}" `
              -CosmosDbAccountName "${{ needs.deploy.outputs.cosmosDbAccountName }}" `
              -CosmosDbDatabaseName "${{ needs.deploy.outputs.cosmosDbDatabaseName }}" `
              -CosmosDbContainerName "${{ needs.deploy.outputs.cosmosDbContainerName }}" `
              -CosmosDbContainerPartitionKey "${{ needs.deploy.outputs.cosmosDbContainerPartitionKey }}"

      - name: Set Function App CORS Settings
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            $ErrorActionPreference = "Stop"
            ./scripts/Set-FunctionAppCorsSettings.ps1 `
              -ResourceGroupName "${{ inputs.resourceGroupName }}" `
              -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}" `
              -AllowedOrigins "${{ needs.deploy.outputs.swaUrl }}" `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

  push:
    needs: [deploy, config]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: false
        fetch-depth: 0

    - name: Sign in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true
  
    - name: Replace Placeholders in HTML
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: |
          $ErrorActionPreference = "Stop"
          Write-Output "Function App Name: ${{ needs.deploy.outputs.functionAppName }}"
          ./scripts/Set-RepoHtmlPlaceholders.ps1 `
            -HtmlFile "./src/index.html" `
            -FunctionAppName "${{ needs.deploy.outputs.functionAppName }}"
          # Verification
          Get-Content "./src/index.html" -Raw | Write-Output
          
    - name: Commit and push if changed
      env:
        TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add -A
        git diff-index --quiet HEAD || git commit -m "Automatically replaced function API URL placeholders in HTML [skip ci]"
        git remote set-url origin https://x-access-token:${TOKEN}@github.com/kennethcarnes/azure-view.git
        git push origin ${{ github.ref }}    
  
    - name: Update Azure Static Web App with latest code
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $resourceGroupName = "${{ inputs.resourceGroupName }}"
          $swaName = "${{ needs.deploy.outputs.swaName }}"

          Update-AzStaticWebApp `
          -SubscriptionId $subscriptionId `
          -ResourceGroupName $resourceGroupName `
          -Name $swaName `
          -AppLocation "./src/"
              