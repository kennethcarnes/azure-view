name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}
      cosmosDbPartitionKey: ${{ steps.deploy.outputs.cosmosDbPartitionKey }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}

      - name: Echo ARM Outputs
        run: |
          echo "ARM Outputs: ${{ toJson(steps.deploy.outputs) }}"

      - name: Debug
        run: |
          echo "Function App Name: ${{ steps.deploy.outputs.functionAppNameOutput }}"
        
      - name: 'Deploy PowerShell to Azure Function App'
        uses: Azure/functions-action@v1
        id: func-ingest-data
        with:
          app-name: ${{ steps.deploy.outputs.functionAppNameOutputs }}
          package: .\functionapps\func-ingest-data

      - name: Set Azure Function Permissions for Cosmos DB
        shell: pwsh
        run: |
          .\scripts\set-permissions.ps1 `
            -CosmosDbAccountName ${{ steps.deploy.outputs.cosmosDbAccountName }} `
            -CosmosDbDatabaseName ${{ steps.deploy.outputs.cosmosDbDatabaseName }} `
            -CosmosDbContainerName ${{ steps.deploy.outputs.cosmosDbContainerName }} `
            -CosmosDbPartitionKey ${{ steps.deploy.outputs.cosmosDbPartitionKey }} `

      - name: Set Azure Function Permissions for Key Vault
        shell: pwsh
        run: |
          .\scripts\set-permissions.ps1 `
            -KeyVaultName ${{ steps.deploy.outputs.keyVaultName }} `
            -KeyVaultSecretName ${{ steps.deploy.outputs.keyVaultSecretName }} `
            -KeyVaultSecretValue ${{ steps.deploy.outputs.keyVaultSecretValue }}

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run smoke tests
        shell: pwsh
        run: |
          Write-Host '${{needs.deploy.outputs.swaName}}'
          # $container = New-PesterContainer `
          #   -Path 'deploy/Website.Tests.ps1' `
          #   -Data @{ HostName = '${{needs.deploy.outputs.swaName}}' }
          # Invoke-Pester `
          #   -Container $container `
          #   -CI
        