name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run preflight validation
        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
      swaUrl: ${{ steps.deploy.outputs.swaUrl }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}
      appConfigName: ${{ steps.deploy.outputs.appConfigName }}
      cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}
      cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
  
      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentMode: ${{ (inputs.environmentType == 'Test') && 'Complete' || 'Incremental' }} 
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
  
      - name: Echo Outputs
        run: |
          echo "swaName: ${{ steps.deploy.outputs.swaName }}"
          echo "swaUrl: ${{ steps.deploy.outputs.swaUrl }}"
          echo "functionAppName: ${{ steps.deploy.outputs.functionAppName }}"
          echo "keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}"
          echo "appConfigName: ${{ steps.deploy.outputs.appConfigName }}"
          echo "cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}"
          echo "cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
          echo "cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}"
          echo "cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
          
  release:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Deploy all functions to single function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy.outputs.functionAppName }}
          package: ./functions/

  post-deploy-setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: List scripts directory and set execute permission
      run: ls -la ./scripts && chmod +x ./scripts/*.ps1

  post-deploy-config:
    needs: [ deploy, release, post-deploy-setup ]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
    - name: Run PowerShell scripts in parallel
      uses: azure/powershell@v1
      env:
        appConfigName: ${{ needs.deploy.outputs.appConfigName }}
        resourceGroupName: ${{ inputs.resourceGroupName }}
        functionAppName: ${{ needs.deploy.outputs.functionAppName }}
        swaName: ${{ needs.deploy.outputs.swaName }}
        keyVaultName: ${{ needs.deploy.outputs.keyVaultName }}
        cosmosDbAccountName: ${{ needs.deploy.outputs.cosmosDbAccountName }}
        cosmosDbDatabaseName: ${{ needs.deploy.outputs.cosmosDbDatabaseName }}
        cosmosDbContainerName: ${{ needs.deploy.outputs.cosmosDbContainerName }}
        cosmosDbContainerPartitionKey: ${{ needs.deploy.outputs.cosmosDbContainerPartitionKey }}
        swaUrl: ${{ needs.deploy.outputs.swaUrl }}
      with:
        azPSVersion: "latest"
        inlineScript: |
          # Start scripts in background jobs
          $job1 = Start-Job -ScriptBlock {
            ./scripts/set-azappconfig.ps1 `
              -AppConfigName $using:appConfigName `
              -SwaName $using:swaName `
              -KeyVaultName $using:keyVaultName `
              -CosmosDbAccountName $using:cosmosDbAccountName `
              -CosmosDbDatabaseName $using:cosmosDbDatabaseName `
              -CosmosDbContainerName $using:cosmosDbContainerName `
              -CosmosDbContainerPartitionKey $using:cosmosDbContainerPartitionKey
          }

          $job2 = Start-Job -ScriptBlock {
            ./scripts/update-cors.ps1 `
              -ResourceGroupName $using:resourceGroupName `
              -FunctionAppName $using:functionAppName `
              -AllowedOrigins $using:swaUrl
          }

          $job3 = Start-Job -ScriptBlock {
            ./scripts/replace-placeholders.ps1 `
              -HtmlFile "./src/index.html" `
              -FunctionAppName $using:functionAppName
          }

          $job4 = Start-Job -ScriptBlock {
            ./scripts/set-permissions.ps1 `
              -ResourceGroupName $using:resourceGroupName `
              -FunctionAppName $using:functionAppName `
              -CosmosDbAccountName $using:cosmosDbAccountName
          }

          # Wait for all jobs to finish
          $jobs = @($job1, $job2, $job3, $job4)
          $jobs | Wait-Job

          # Display outputs
          $jobs | ForEach-Object {
            Receive-Job -Job $_
            Remove-Job -Job $_
          }  

  push-changes:
    needs: [ deploy, release, post-deploy-setup, post-deploy-config ]
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    steps:
    - name: Commit and push if changed
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add -A
        git diff-index --quiet HEAD || git commit -m "Automatically replaced function API URL placeholders in HTML [skip ci]"
        git push origin main
    
    - name: Update Azure Static Web App with latest code
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: |
          Update-AzStaticWebApp `
          -ResourceGroupName ${{ inputs.resourceGroupName }} `
          -Name ${{ needs.deploy.outputs.swaName }} `
          -AppLocation "./src/"