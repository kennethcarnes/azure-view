name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Run preflight validation

        if: inputs.environmentType != 'Production'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
          deploymentMode: Validate

      - name: Run what-if
        if: inputs.environmentType == 'Production'
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: false
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
          additionalArguments: --what-if

  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    outputs:
      swaName: ${{ steps.deploy.outputs.swaName }}
      functionAppNames: ${{ steps.deploy.outputs.functionAppNames }}
      keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}
      appConfigName: ${{ steps.deploy.outputs.appConfigName }}
      cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}
      cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}
      cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}
      cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Sign in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Deploy Bicep file
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          failOnStdErr: true
          deploymentName: ${{ github.run_number }}
          resourceGroupName: ${{ inputs.resourceGroupName }}
          scope: resourcegroup
          template: ./infra/main.bicep
          parameters: >
            environmentType=${{ inputs.environmentType }}
            repositoryToken=${{ secrets.REPOSITORY_TOKEN }}
            tenantId=${{ secrets.AZURE_TENANT_ID }}
  
      - name: Debug Outputs
        run: |
          echo "Debugging output variables:"
          echo "swaName: ${{ steps.deploy.outputs.swaName }}"
          echo "functionAppNames: ${{ steps.deploy.outputs.functionAppNames }}"
          echo "keyVaultName: ${{ steps.deploy.outputs.keyVaultName }}"
          echo "appConfigName: ${{ steps.deploy.outputs.appConfigName }}"
          echo "cosmosDbAccountName: ${{ steps.deploy.outputs.cosmosDbAccountName }}"
          echo "cosmosDbDatabaseName: ${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
          echo "cosmosDbContainerName: ${{ steps.deploy.outputs.cosmosDbContainerName }}"
          echo "cosmosDbContainerPartitionKey: ${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
  
      - name: Set Azure App Configuration
        shell: pwsh
        run: |
          Install-Module -Name Az.AppConfiguration -Force -Scope CurrentUser -SkipPublisherCheck
          $appConfigName = "${{ steps.deploy.outputs.appConfigName }}"
          $endpoint = "https://$($appConfigName).azconfig.io"
          Write-Host "Debug: Endpoint is $endpoint"
          $keyValuePairs = @{
            "swaName" = "${{ steps.deploy.outputs.swaName }}"
            "keyVaultName" = "${{ steps.deploy.outputs.keyVaultName }}"
            "cosmosDbAccountName" = "${{ steps.deploy.outputs.cosmosDbAccountName }}"
            "cosmosDbDatabaseName" = "${{ steps.deploy.outputs.cosmosDbDatabaseName }}"
            "cosmosDbContainerName" = "${{ steps.deploy.outputs.cosmosDbContainerName }}"
            "cosmosDbContainerPartitionKey" = "${{ steps.deploy.outputs.cosmosDbContainerPartitionKey }}"
          }
          
          foreach ($key in $keyValuePairs.Keys) {
            $value = $keyValuePairs[$key]
            $label = $key  # You can choose either $key or $value depending on your needs
            Set-AzAppConfigurationKeyValue -Endpoint $endpoint -Key $key -Label $label -Value $value
          }          
          
  release:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: 
          - name: func-ingest-data
          - name: func-retrieve-data
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy package to function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ matrix.app.name }}
          package: ./functionapps/${{ matrix.app.name }}

  apply-permissions:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: 
          - name: func-ingest-data
            permissionType: Write
          - name: func-retrieve-data
            permissionType: Read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      - name: Login Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
    
      - name: Run PowerShell Set-Permissions.ps1
        uses: azure/powershell@v1
        with:
          azPSVersion: "latest"
          inlineScript: |
            ./scripts/Set-Permissions.ps1 `
            -ResourceGroupName ${{ inputs.resourceGroupName }} `
            -FunctionAppName "${{ matrix.app.name }}" `
            -KeyVaultName ${{ needs.deploy.outputs.keyVaultName }} `
            -CosmosDbAccountName ${{ needs.deploy.outputs.cosmosDbAccountName }} `
            -CosmosDbDatabaseName ${{ needs.deploy.outputs.cosmosDbDatabaseName }} `
            -CosmosDbContainerName ${{ needs.deploy.outputs.cosmosDbContainerName }} `
            -CosmosDbPartitionKey ${{ needs.deploy.outputs.cosmosDbContainerPartitionKey }} `
            -CosmosDbPermissionType ${{ matrix.app.permissionType }}  `             
          
  smoke-test:
    runs-on: ubuntu-latest
    needs: [deploy, release, apply-permissions]
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run smoke tests
        run: |
          Write-Host '${{needs.deploy.outputs.swaName}}'
          # $container = New-PesterContainer `
          #   -Path 'deploy/Website.Tests.ps1' `
          #   -Data @{ HostName = '${{needs.deploy.outputs.swaName}}' }
          # Invoke-Pester `
          #   -Container $container `
          #   -CI